# -*- coding: utf-8 -*-
"""Notebook 2 - Model Training Script

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tgrrCy1buR0OX98vIuQEMJL1Kz4eWmn3
"""

# # Notebook 2: Model Training and Evaluation
#
# **Objective:** Load the preprocessed data, train the three different predictive models (Random Forest, LSTM, Transformer), evaluate their performance, and save the best-performing models.

# Step 1: Import Libraries and Load Processed Data
import numpy as np
import pandas as pd
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import os

# Add src directory to path
sys.path.append(os.path.abspath(os.path.join('..', 'src')))

import model_training as mt
import evaluate as ev
import utils

# Load the processed data
processed_dir = '../data/processed'
X_train = np.load(os.path.join(processed_dir, 'X_train.npy'))
X_test = np.load(os.path.join(processed_dir, 'X_test.npy'))
y_train = np.load(os.path.join(processed_dir, 'y_train.npy'))
y_test = np.load(os.path.join(processed_dir, 'y_test.npy'))

print("Data loaded successfully.")
print(f"Training data shape: {X_train.shape}")

# ### Step 2: Train the Predictive Models
# We will now call the training functions from our `model_training.py` script.
# Train Random Forest
rf_model = mt.train_random_forest(X_train, y_train)

# Train LSTM
lstm_model = mt.train_lstm(X_train, y_train)

# Train Transformer
transformer_model = mt.train_transformer(X_train, y_train)

trained_models = {
    'rf': rf_model,
    'lstm': lstm_model,
    'transformer': transformer_model
}

# ### Step 3: Evaluate Model Performance
# We'll use our evaluation script to get predictions and calculate performance metrics for all models, including the hybrid ensemble.
# Get predictions for all models
predictions = ev.get_predictions(trained_models, X_test)

# Get performance metrics dataframe
results_df = ev.evaluate_models(predictions, y_test)

print("Model Performance Comparison:")
print(results_df.to_string())

# #### Visualize the Results
plt.style.use('seaborn-v0_8-whitegrid')
results_df.set_index('Model').plot(kind='bar', figsize=(12, 7), grid=True)
plt.title("Model Performance Metrics")
plt.ylabel("Score")
plt.xticks(rotation=0)
plt.legend(loc='lower right')
plt.tight_layout()
plt.show()

# ### Step 4: Save the Final Models
# The Hybrid Ensemble is a conceptual model based on the outputs of the others, so we will save the three base models for future use.
utils.save_model(rf_model, 'random_forest_v1.pkl')
utils.save_model(lstm_model, 'lstm_model_v1.h5')
utils.save_model(transformer_model, 'transformer_model_v1.h5')